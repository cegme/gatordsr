/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package streamcorpus;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

/**
 * Labels are human generated assertions about a portion of a document
 * For example, a human author might label their own text by inserting
 * hyperlinks to Wikipedia, or a NIST assessor might record which
 * tokens in a text mention a target entity.
 * 
 * Label instances can be attached in three palces:
 *  -  Token.labels  list
 *  -  Sentence.labels  list
 *  -  ContentItem.labels  map
 */
public class Label implements org.apache.thrift.TBase<Label, Label._Fields>, java.io.Serializable, Cloneable, Comparable<Label> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Label");

  private static final org.apache.thrift.protocol.TField ANNOTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("annotator", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("offsets", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LabelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LabelTupleSchemeFactory());
  }

  /**
   * identifies the source of this Label
   */
  public Annotator annotator; // required
  /**
   * identifies the information need assessed by annotator
   */
  public Target target; // required
  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Map<OffsetType,Offset> offsets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * identifies the source of this Label
     */
    ANNOTATOR((short)1, "annotator"),
    /**
     * identifies the information need assessed by annotator
     */
    TARGET((short)2, "target"),
    /**
     * pointers to data to which this label applies.  If empty, then
     * label applies to the entire Token, Sentence, or ContentItem to
     * which it is attached.
     */
    OFFSETS((short)3, "offsets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANNOTATOR
          return ANNOTATOR;
        case 2: // TARGET
          return TARGET;
        case 3: // OFFSETS
          return OFFSETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
	public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
	public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.OFFSETS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANNOTATOR, new org.apache.thrift.meta_data.FieldMetaData("annotator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotator.class)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Target.class)));
    tmpMap.put(_Fields.OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("offsets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OffsetType.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Offset.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Label.class, metaDataMap);
  }

  public Label() {
    this.offsets = new HashMap<OffsetType,Offset>();

  }

  public Label(
    Annotator annotator,
    Target target)
  {
    this();
    this.annotator = annotator;
    this.target = target;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Label(Label other) {
    if (other.isSetAnnotator()) {
      this.annotator = new Annotator(other.annotator);
    }
    if (other.isSetTarget()) {
      this.target = new Target(other.target);
    }
    if (other.isSetOffsets()) {
      Map<OffsetType,Offset> __this__offsets = new HashMap<OffsetType,Offset>();
      for (Map.Entry<OffsetType, Offset> other_element : other.offsets.entrySet()) {

        OffsetType other_element_key = other_element.getKey();
        Offset other_element_value = other_element.getValue();

        OffsetType __this__offsets_copy_key = other_element_key;

        Offset __this__offsets_copy_value = new Offset(other_element_value);

        __this__offsets.put(__this__offsets_copy_key, __this__offsets_copy_value);
      }
      this.offsets = __this__offsets;
    }
  }

  @Override
public Label deepCopy() {
    return new Label(this);
  }

  @Override
  public void clear() {
    this.annotator = null;
    this.target = null;
    this.offsets = new HashMap<OffsetType,Offset>();

  }

  /**
   * identifies the source of this Label
   */
  public Annotator getAnnotator() {
    return this.annotator;
  }

  /**
   * identifies the source of this Label
   */
  public Label setAnnotator(Annotator annotator) {
    this.annotator = annotator;
    return this;
  }

  public void unsetAnnotator() {
    this.annotator = null;
  }

  /** Returns true if field annotator is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotator() {
    return this.annotator != null;
  }

  public void setAnnotatorIsSet(boolean value) {
    if (!value) {
      this.annotator = null;
    }
  }

  /**
   * identifies the information need assessed by annotator
   */
  public Target getTarget() {
    return this.target;
  }

  /**
   * identifies the information need assessed by annotator
   */
  public Label setTarget(Target target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public int getOffsetsSize() {
    return (this.offsets == null) ? 0 : this.offsets.size();
  }

  public void putToOffsets(OffsetType key, Offset val) {
    if (this.offsets == null) {
      this.offsets = new HashMap<OffsetType,Offset>();
    }
    this.offsets.put(key, val);
  }

  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Map<OffsetType,Offset> getOffsets() {
    return this.offsets;
  }

  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Label setOffsets(Map<OffsetType,Offset> offsets) {
    this.offsets = offsets;
    return this;
  }

  public void unsetOffsets() {
    this.offsets = null;
  }

  /** Returns true if field offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsets() {
    return this.offsets != null;
  }

  public void setOffsetsIsSet(boolean value) {
    if (!value) {
      this.offsets = null;
    }
  }

  @Override
public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANNOTATOR:
      if (value == null) {
        unsetAnnotator();
      } else {
        setAnnotator((Annotator)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((Target)value);
      }
      break;

    case OFFSETS:
      if (value == null) {
        unsetOffsets();
      } else {
        setOffsets((Map<OffsetType,Offset>)value);
      }
      break;

    }
  }

  @Override
public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANNOTATOR:
      return getAnnotator();

    case TARGET:
      return getTarget();

    case OFFSETS:
      return getOffsets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANNOTATOR:
      return isSetAnnotator();
    case TARGET:
      return isSetTarget();
    case OFFSETS:
      return isSetOffsets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Label)
      return this.equals((Label)that);
    return false;
  }

  public boolean equals(Label that) {
    if (that == null)
      return false;

    boolean this_present_annotator = true && this.isSetAnnotator();
    boolean that_present_annotator = true && that.isSetAnnotator();
    if (this_present_annotator || that_present_annotator) {
      if (!(this_present_annotator && that_present_annotator))
        return false;
      if (!this.annotator.equals(that.annotator))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_offsets = true && this.isSetOffsets();
    boolean that_present_offsets = true && that.isSetOffsets();
    if (this_present_offsets || that_present_offsets) {
      if (!(this_present_offsets && that_present_offsets))
        return false;
      if (!this.offsets.equals(that.offsets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Label other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnnotator()).compareTo(other.isSetAnnotator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotator, other.annotator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsets()).compareTo(other.isSetOffsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsets, other.offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Label(");
    boolean first = true;

    sb.append("annotator:");
    if (this.annotator == null) {
      sb.append("null");
    } else {
      sb.append(this.annotator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (isSetOffsets()) {
      if (!first) sb.append(", ");
      sb.append("offsets:");
      if (this.offsets == null) {
        sb.append("null");
      } else {
        sb.append(this.offsets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (annotator != null) {
      annotator.validate();
    }
    if (target != null) {
      target.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LabelStandardSchemeFactory implements SchemeFactory {
    @Override
	public LabelStandardScheme getScheme() {
      return new LabelStandardScheme();
    }
  }

  private static class LabelStandardScheme extends StandardScheme<Label> {

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, Label struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANNOTATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.annotator = new Annotator();
              struct.annotator.read(iprot);
              struct.setAnnotatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.target = new Target();
              struct.target.read(iprot);
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.offsets = new HashMap<OffsetType,Offset>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  OffsetType _key2;
                  Offset _val3;
                  _key2 = OffsetType.findByValue(iprot.readI32());
                  _val3 = new Offset();
                  _val3.read(iprot);
                  struct.offsets.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setOffsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, Label struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.annotator != null) {
        oprot.writeFieldBegin(ANNOTATOR_FIELD_DESC);
        struct.annotator.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        struct.target.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.offsets != null) {
        if (struct.isSetOffsets()) {
          oprot.writeFieldBegin(OFFSETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.offsets.size()));
            for (Map.Entry<OffsetType, Offset> _iter4 : struct.offsets.entrySet())
            {
              oprot.writeI32(_iter4.getKey().getValue());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LabelTupleSchemeFactory implements SchemeFactory {
    @Override
	public LabelTupleScheme getScheme() {
      return new LabelTupleScheme();
    }
  }

  private static class LabelTupleScheme extends TupleScheme<Label> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Label struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnnotator()) {
        optionals.set(0);
      }
      if (struct.isSetTarget()) {
        optionals.set(1);
      }
      if (struct.isSetOffsets()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAnnotator()) {
        struct.annotator.write(oprot);
      }
      if (struct.isSetTarget()) {
        struct.target.write(oprot);
      }
      if (struct.isSetOffsets()) {
        {
          oprot.writeI32(struct.offsets.size());
          for (Map.Entry<OffsetType, Offset> _iter5 : struct.offsets.entrySet())
          {
            oprot.writeI32(_iter5.getKey().getValue());
            _iter5.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Label struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.annotator = new Annotator();
        struct.annotator.read(iprot);
        struct.setAnnotatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.target = new Target();
        struct.target.read(iprot);
        struct.setTargetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.offsets = new HashMap<OffsetType,Offset>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            OffsetType _key8;
            Offset _val9;
            _key8 = OffsetType.findByValue(iprot.readI32());
            _val9 = new Offset();
            _val9.read(iprot);
            struct.offsets.put(_key8, _val9);
          }
        }
        struct.setOffsetsIsSet(true);
      }
    }
  }

}

