/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package streamcorpus;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

/**
 * Targets are "informationt targets," such as entities or topics, usually from a knowledge base,
 * such as Wikipedia.
 */
public class Target implements org.apache.thrift.TBase<Target, Target._Fields>, java.io.Serializable, Cloneable,
		Comparable<Target> {
	private static final org.apache.thrift.protocol.TStruct						STRUCT_DESC									= new org.apache.thrift.protocol.TStruct(
																																																		"Target");

	private static final org.apache.thrift.protocol.TField						TARGET_ID_FIELD_DESC				= new org.apache.thrift.protocol.TField(
																																																		"target_id",
																																																		org.apache.thrift.protocol.TType.STRING,
																																																		(short) 1);
	private static final org.apache.thrift.protocol.TField						KB_ID_FIELD_DESC						= new org.apache.thrift.protocol.TField(
																																																		"kb_id",
																																																		org.apache.thrift.protocol.TType.STRING,
																																																		(short) 2);
	private static final org.apache.thrift.protocol.TField						KB_SNAPSHOT_TIME_FIELD_DESC	= new org.apache.thrift.protocol.TField(
																																																		"kb_snapshot_time",
																																																		org.apache.thrift.protocol.TType.STRUCT,
																																																		(short) 3);

	private static final Map<Class<? extends IScheme>, SchemeFactory>	schemes											= new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TargetStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TargetTupleSchemeFactory());
	}

	/**
	 * unique string identifier, usually a URL into Wikipedia, Freebase, or some other structured
	 * reference system for info targets.
	 */
	public String																											target_id;																																						// required
	/**
	 * kb_id is usually redundant if the target_id is a full URL, e.g. en.wikipedia.org
	 */
	public String																											kb_id;																																								// optional
	/**
	 * moment in history that the target_kb was accessed
	 */
	public StreamTime																									kb_snapshot_time;																																		// optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding and
	 * manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * unique string identifier, usually a URL into Wikipedia, Freebase, or some other structured
		 * reference system for info targets.
		 */
		TARGET_ID((short) 1, "target_id"),
		/**
		 * kb_id is usually redundant if the target_id is a full URL, e.g. en.wikipedia.org
		 */
		KB_ID((short) 2, "kb_id"),
		/**
		 * moment in history that the target_kb was accessed
		 */
		KB_SNAPSHOT_TIME((short) 3, "kb_snapshot_time");

		private static final Map<String, _Fields>	byName	= new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // TARGET_ID
				return TARGET_ID;
			case 2: // KB_ID
				return KB_ID;
			case 3: // KB_SNAPSHOT_TIME
				return KB_SNAPSHOT_TIME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short		_thriftId;
		private final String	_fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		@Override
		public short getThriftFieldId() {
			return _thriftId;
		}

		@Override
		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private _Fields																															optionals[]	= { _Fields.KB_ID,
			_Fields.KB_SNAPSHOT_TIME																														};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>	metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("target_id",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KB_ID, new org.apache.thrift.meta_data.FieldMetaData("kb_id",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KB_SNAPSHOT_TIME, new org.apache.thrift.meta_data.FieldMetaData("kb_snapshot_time",
				org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(
						org.apache.thrift.protocol.TType.STRUCT, StreamTime.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Target.class, metaDataMap);
	}

	public Target() {
	}

	public Target(String target_id) {
		this();
		this.target_id = target_id;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Target(Target other) {
		if (other.isSetTarget_id()) {
			this.target_id = other.target_id;
		}
		if (other.isSetKb_id()) {
			this.kb_id = other.kb_id;
		}
		if (other.isSetKb_snapshot_time()) {
			this.kb_snapshot_time = new StreamTime(other.kb_snapshot_time);
		}
	}

	@Override
	public Target deepCopy() {
		return new Target(this);
	}

	@Override
	public void clear() {
		this.target_id = null;
		this.kb_id = null;
		this.kb_snapshot_time = null;
	}

	/**
	 * unique string identifier, usually a URL into Wikipedia, Freebase, or some other structured
	 * reference system for info targets.
	 */
	public String getTarget_id() {
		return this.target_id;
	}

	/**
	 * unique string identifier, usually a URL into Wikipedia, Freebase, or some other structured
	 * reference system for info targets.
	 */
	public Target setTarget_id(String target_id) {
		this.target_id = target_id;
		return this;
	}

	public void unsetTarget_id() {
		this.target_id = null;
	}

	/** Returns true if field target_id is set (has been assigned a value) and false otherwise */
	public boolean isSetTarget_id() {
		return this.target_id != null;
	}

	public void setTarget_idIsSet(boolean value) {
		if (!value) {
			this.target_id = null;
		}
	}

	/**
	 * kb_id is usually redundant if the target_id is a full URL, e.g. en.wikipedia.org
	 */
	public String getKb_id() {
		return this.kb_id;
	}

	/**
	 * kb_id is usually redundant if the target_id is a full URL, e.g. en.wikipedia.org
	 */
	public Target setKb_id(String kb_id) {
		this.kb_id = kb_id;
		return this;
	}

	public void unsetKb_id() {
		this.kb_id = null;
	}

	/** Returns true if field kb_id is set (has been assigned a value) and false otherwise */
	public boolean isSetKb_id() {
		return this.kb_id != null;
	}

	public void setKb_idIsSet(boolean value) {
		if (!value) {
			this.kb_id = null;
		}
	}

	/**
	 * moment in history that the target_kb was accessed
	 */
	public StreamTime getKb_snapshot_time() {
		return this.kb_snapshot_time;
	}

	/**
	 * moment in history that the target_kb was accessed
	 */
	public Target setKb_snapshot_time(StreamTime kb_snapshot_time) {
		this.kb_snapshot_time = kb_snapshot_time;
		return this;
	}

	public void unsetKb_snapshot_time() {
		this.kb_snapshot_time = null;
	}

	/** Returns true if field kb_snapshot_time is set (has been assigned a value) and false otherwise */
	public boolean isSetKb_snapshot_time() {
		return this.kb_snapshot_time != null;
	}

	public void setKb_snapshot_timeIsSet(boolean value) {
		if (!value) {
			this.kb_snapshot_time = null;
		}
	}

	@Override
	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case TARGET_ID:
			if (value == null) {
				unsetTarget_id();
			} else {
				setTarget_id((String) value);
			}
			break;

		case KB_ID:
			if (value == null) {
				unsetKb_id();
			} else {
				setKb_id((String) value);
			}
			break;

		case KB_SNAPSHOT_TIME:
			if (value == null) {
				unsetKb_snapshot_time();
			} else {
				setKb_snapshot_time((StreamTime) value);
			}
			break;

		}
	}

	@Override
	public Object getFieldValue(_Fields field) {
		switch (field) {
		case TARGET_ID:
			return getTarget_id();

		case KB_ID:
			return getKb_id();

		case KB_SNAPSHOT_TIME:
			return getKb_snapshot_time();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
	 * otherwise
	 */
	@Override
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case TARGET_ID:
			return isSetTarget_id();
		case KB_ID:
			return isSetKb_id();
		case KB_SNAPSHOT_TIME:
			return isSetKb_snapshot_time();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Target)
			return this.equals((Target) that);
		return false;
	}

	public boolean equals(Target that) {
		if (that == null)
			return false;

		boolean this_present_target_id = true && this.isSetTarget_id();
		boolean that_present_target_id = true && that.isSetTarget_id();
		if (this_present_target_id || that_present_target_id) {
			if (!(this_present_target_id && that_present_target_id))
				return false;
			if (!this.target_id.equals(that.target_id))
				return false;
		}

		boolean this_present_kb_id = true && this.isSetKb_id();
		boolean that_present_kb_id = true && that.isSetKb_id();
		if (this_present_kb_id || that_present_kb_id) {
			if (!(this_present_kb_id && that_present_kb_id))
				return false;
			if (!this.kb_id.equals(that.kb_id))
				return false;
		}

		boolean this_present_kb_snapshot_time = true && this.isSetKb_snapshot_time();
		boolean that_present_kb_snapshot_time = true && that.isSetKb_snapshot_time();
		if (this_present_kb_snapshot_time || that_present_kb_snapshot_time) {
			if (!(this_present_kb_snapshot_time && that_present_kb_snapshot_time))
				return false;
			if (!this.kb_snapshot_time.equals(that.kb_snapshot_time))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	@Override
	public int compareTo(Target other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetTarget_id()).compareTo(other.isSetTarget_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTarget_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_id, other.target_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetKb_id()).compareTo(other.isSetKb_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKb_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kb_id, other.kb_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetKb_snapshot_time()).compareTo(other.isSetKb_snapshot_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKb_snapshot_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kb_snapshot_time, other.kb_snapshot_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@Override
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	@Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	@Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Target(");
		boolean first = true;

		sb.append("target_id:");
		if (this.target_id == null) {
			sb.append("null");
		} else {
			sb.append(this.target_id);
		}
		first = false;
		if (isSetKb_id()) {
			if (!first)
				sb.append(", ");
			sb.append("kb_id:");
			if (this.kb_id == null) {
				sb.append("null");
			} else {
				sb.append(this.kb_id);
			}
			first = false;
		}
		if (isSetKb_snapshot_time()) {
			if (!first)
				sb.append(", ");
			sb.append("kb_snapshot_time:");
			if (this.kb_snapshot_time == null) {
				sb.append("null");
			} else {
				sb.append(this.kb_snapshot_time);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (kb_snapshot_time != null) {
			kb_snapshot_time.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TargetStandardSchemeFactory implements SchemeFactory {
		@Override
		public TargetStandardScheme getScheme() {
			return new TargetStandardScheme();
		}
	}

	private static class TargetStandardScheme extends StandardScheme<Target> {

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot, Target struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // TARGET_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.target_id = iprot.readString();
						struct.setTarget_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // KB_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.kb_id = iprot.readString();
						struct.setKb_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // KB_SNAPSHOT_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.kb_snapshot_time = new StreamTime();
						struct.kb_snapshot_time.read(iprot);
						struct.setKb_snapshot_timeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot, Target struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.target_id != null) {
				oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
				oprot.writeString(struct.target_id);
				oprot.writeFieldEnd();
			}
			if (struct.kb_id != null) {
				if (struct.isSetKb_id()) {
					oprot.writeFieldBegin(KB_ID_FIELD_DESC);
					oprot.writeString(struct.kb_id);
					oprot.writeFieldEnd();
				}
			}
			if (struct.kb_snapshot_time != null) {
				if (struct.isSetKb_snapshot_time()) {
					oprot.writeFieldBegin(KB_SNAPSHOT_TIME_FIELD_DESC);
					struct.kb_snapshot_time.write(oprot);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TargetTupleSchemeFactory implements SchemeFactory {
		@Override
		public TargetTupleScheme getScheme() {
			return new TargetTupleScheme();
		}
	}

	private static class TargetTupleScheme extends TupleScheme<Target> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Target struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetTarget_id()) {
				optionals.set(0);
			}
			if (struct.isSetKb_id()) {
				optionals.set(1);
			}
			if (struct.isSetKb_snapshot_time()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetTarget_id()) {
				oprot.writeString(struct.target_id);
			}
			if (struct.isSetKb_id()) {
				oprot.writeString(struct.kb_id);
			}
			if (struct.isSetKb_snapshot_time()) {
				struct.kb_snapshot_time.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Target struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.target_id = iprot.readString();
				struct.setTarget_idIsSet(true);
			}
			if (incoming.get(1)) {
				struct.kb_id = iprot.readString();
				struct.setKb_idIsSet(true);
			}
			if (incoming.get(2)) {
				struct.kb_snapshot_time = new StreamTime();
				struct.kb_snapshot_time.read(iprot);
				struct.setKb_snapshot_timeIsSet(true);
			}
		}
	}

}
