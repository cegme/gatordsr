<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class OffsetType {
  const LINES = 0;
  const BYTES = 1;
  const CHARS = 2;
  static public $__names = array(
    0 => 'LINES',
    1 => 'BYTES',
    2 => 'CHARS',
  );
}

final class EntityType {
  const PER = 0;
  const ORG = 1;
  const LOC = 2;
  const MALE_PRONOUN = 3;
  const FEMALE_PRONOUN = 4;
  const TIME = 5;
  const DATE = 6;
  const MONEY = 7;
  const PERCENT = 8;
  const MISC = 9;
  static public $__names = array(
    0 => 'PER',
    1 => 'ORG',
    2 => 'LOC',
    3 => 'MALE_PRONOUN',
    4 => 'FEMALE_PRONOUN',
    5 => 'TIME',
    6 => 'DATE',
    7 => 'MONEY',
    8 => 'PERCENT',
    9 => 'MISC',
  );
}

final class Versions {
  const v0_2_0 = 0;
  static public $__names = array(
    0 => 'v0_2_0',
  );
}

class StreamTime {
  static $_TSPEC;

  public $epoch_ticks = null;
  public $zulu_timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'epoch_ticks',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'zulu_timestamp',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['epoch_ticks'])) {
        $this->epoch_ticks = $vals['epoch_ticks'];
      }
      if (isset($vals['zulu_timestamp'])) {
        $this->zulu_timestamp = $vals['zulu_timestamp'];
      }
    }
  }

  public function getName() {
    return 'StreamTime';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->epoch_ticks);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zulu_timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StreamTime');
    if ($this->epoch_ticks !== null) {
      $xfer += $output->writeFieldBegin('epoch_ticks', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->epoch_ticks);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zulu_timestamp !== null) {
      $xfer += $output->writeFieldBegin('zulu_timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->zulu_timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Annotator {
  static $_TSPEC;

  public $annotator_id = null;
  public $annotation_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'annotator_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'annotation_time',
          'type' => TType::STRUCT,
          'class' => '\StreamTime',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['annotator_id'])) {
        $this->annotator_id = $vals['annotator_id'];
      }
      if (isset($vals['annotation_time'])) {
        $this->annotation_time = $vals['annotation_time'];
      }
    }
  }

  public function getName() {
    return 'Annotator';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->annotator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->annotation_time = new \StreamTime();
            $xfer += $this->annotation_time->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Annotator');
    if ($this->annotator_id !== null) {
      $xfer += $output->writeFieldBegin('annotator_id', TType::STRING, 1);
      $xfer += $output->writeString($this->annotator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->annotation_time !== null) {
      if (!is_object($this->annotation_time)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('annotation_time', TType::STRUCT, 2);
      $xfer += $this->annotation_time->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Offset {
  static $_TSPEC;

  public $type = null;
  public $first = null;
  public $length = null;
  public $xpath = null;
  public $content_form = "clean_visible";
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'first',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'length',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'xpath',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content_form',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['first'])) {
        $this->first = $vals['first'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
      if (isset($vals['xpath'])) {
        $this->xpath = $vals['xpath'];
      }
      if (isset($vals['content_form'])) {
        $this->content_form = $vals['content_form'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Offset';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->first);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->xpath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content_form);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Offset');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->first !== null) {
      $xfer += $output->writeFieldBegin('first', TType::I64, 2);
      $xfer += $output->writeI64($this->first);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::I32, 3);
      $xfer += $output->writeI32($this->length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xpath !== null) {
      $xfer += $output->writeFieldBegin('xpath', TType::STRING, 4);
      $xfer += $output->writeString($this->xpath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_form !== null) {
      $xfer += $output->writeFieldBegin('content_form', TType::STRING, 5);
      $xfer += $output->writeString($this->content_form);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 6);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Target {
  static $_TSPEC;

  public $target_id = null;
  public $kb_id = null;
  public $kb_snapshot_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'target_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'kb_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'kb_snapshot_time',
          'type' => TType::STRUCT,
          'class' => '\StreamTime',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['target_id'])) {
        $this->target_id = $vals['target_id'];
      }
      if (isset($vals['kb_id'])) {
        $this->kb_id = $vals['kb_id'];
      }
      if (isset($vals['kb_snapshot_time'])) {
        $this->kb_snapshot_time = $vals['kb_snapshot_time'];
      }
    }
  }

  public function getName() {
    return 'Target';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kb_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->kb_snapshot_time = new \StreamTime();
            $xfer += $this->kb_snapshot_time->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Target');
    if ($this->target_id !== null) {
      $xfer += $output->writeFieldBegin('target_id', TType::STRING, 1);
      $xfer += $output->writeString($this->target_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kb_id !== null) {
      $xfer += $output->writeFieldBegin('kb_id', TType::STRING, 2);
      $xfer += $output->writeString($this->kb_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kb_snapshot_time !== null) {
      if (!is_object($this->kb_snapshot_time)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('kb_snapshot_time', TType::STRUCT, 3);
      $xfer += $this->kb_snapshot_time->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Label {
  static $_TSPEC;

  public $annotator = null;
  public $target = null;
  public $offsets = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'annotator',
          'type' => TType::STRUCT,
          'class' => '\Annotator',
          ),
        2 => array(
          'var' => 'target',
          'type' => TType::STRUCT,
          'class' => '\Target',
          ),
        3 => array(
          'var' => 'offsets',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Offset',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['annotator'])) {
        $this->annotator = $vals['annotator'];
      }
      if (isset($vals['target'])) {
        $this->target = $vals['target'];
      }
      if (isset($vals['offsets'])) {
        $this->offsets = $vals['offsets'];
      }
    }
  }

  public function getName() {
    return 'Label';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->annotator = new \Annotator();
            $xfer += $this->annotator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->target = new \Target();
            $xfer += $this->target->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->offsets = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = new \Offset();
              $xfer += $input->readI32($key5);
              $val6 = new \Offset();
              $xfer += $val6->read($input);
              $this->offsets[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Label');
    if ($this->annotator !== null) {
      if (!is_object($this->annotator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('annotator', TType::STRUCT, 1);
      $xfer += $this->annotator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target !== null) {
      if (!is_object($this->target)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('target', TType::STRUCT, 2);
      $xfer += $this->target->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offsets !== null) {
      if (!is_array($this->offsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('offsets', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->offsets));
        {
          foreach ($this->offsets as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $viter8->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Token {
  static $_TSPEC;

  public $token_num = null;
  public $token = null;
  public $offsets = array(
  );
  public $sentence_pos = -1;
  public $lemma = null;
  public $pos = null;
  public $entity_type = null;
  public $mention_id = -1;
  public $equiv_id = -1;
  public $parent_id = -1;
  public $dependency_path = null;
  public $labels = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token_num',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'offsets',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Offset',
            ),
          ),
        4 => array(
          'var' => 'sentence_pos',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'lemma',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pos',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'entity_type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'mention_id',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'equiv_id',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'parent_id',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'dependency_path',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'labels',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Label',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token_num'])) {
        $this->token_num = $vals['token_num'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['offsets'])) {
        $this->offsets = $vals['offsets'];
      }
      if (isset($vals['sentence_pos'])) {
        $this->sentence_pos = $vals['sentence_pos'];
      }
      if (isset($vals['lemma'])) {
        $this->lemma = $vals['lemma'];
      }
      if (isset($vals['pos'])) {
        $this->pos = $vals['pos'];
      }
      if (isset($vals['entity_type'])) {
        $this->entity_type = $vals['entity_type'];
      }
      if (isset($vals['mention_id'])) {
        $this->mention_id = $vals['mention_id'];
      }
      if (isset($vals['equiv_id'])) {
        $this->equiv_id = $vals['equiv_id'];
      }
      if (isset($vals['parent_id'])) {
        $this->parent_id = $vals['parent_id'];
      }
      if (isset($vals['dependency_path'])) {
        $this->dependency_path = $vals['dependency_path'];
      }
      if (isset($vals['labels'])) {
        $this->labels = $vals['labels'];
      }
    }
  }

  public function getName() {
    return 'Token';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->token_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->offsets = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = 0;
              $val15 = new \Offset();
              $xfer += $input->readI32($key14);
              $val15 = new \Offset();
              $xfer += $val15->read($input);
              $this->offsets[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sentence_pos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lemma);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pos);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->entity_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->mention_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->equiv_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parent_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dependency_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->labels = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = '';
              $val22 = array();
              $xfer += $input->readString($key21);
              $val22 = array();
              $_size23 = 0;
              $_etype26 = 0;
              $xfer += $input->readListBegin($_etype26, $_size23);
              for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
              {
                $elem28 = null;
                $elem28 = new \Label();
                $xfer += $elem28->read($input);
                $val22 []= $elem28;
              }
              $xfer += $input->readListEnd();
              $this->labels[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Token');
    if ($this->token_num !== null) {
      $xfer += $output->writeFieldBegin('token_num', TType::I32, 1);
      $xfer += $output->writeI32($this->token_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offsets !== null) {
      if (!is_array($this->offsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('offsets', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->offsets));
        {
          foreach ($this->offsets as $kiter29 => $viter30)
          {
            $xfer += $output->writeI32($kiter29);
            $xfer += $viter30->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sentence_pos !== null) {
      $xfer += $output->writeFieldBegin('sentence_pos', TType::I32, 4);
      $xfer += $output->writeI32($this->sentence_pos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lemma !== null) {
      $xfer += $output->writeFieldBegin('lemma', TType::STRING, 5);
      $xfer += $output->writeString($this->lemma);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pos !== null) {
      $xfer += $output->writeFieldBegin('pos', TType::STRING, 6);
      $xfer += $output->writeString($this->pos);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entity_type !== null) {
      $xfer += $output->writeFieldBegin('entity_type', TType::I32, 7);
      $xfer += $output->writeI32($this->entity_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mention_id !== null) {
      $xfer += $output->writeFieldBegin('mention_id', TType::I16, 8);
      $xfer += $output->writeI16($this->mention_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->equiv_id !== null) {
      $xfer += $output->writeFieldBegin('equiv_id', TType::I32, 9);
      $xfer += $output->writeI32($this->equiv_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent_id !== null) {
      $xfer += $output->writeFieldBegin('parent_id', TType::I32, 10);
      $xfer += $output->writeI32($this->parent_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dependency_path !== null) {
      $xfer += $output->writeFieldBegin('dependency_path', TType::STRING, 11);
      $xfer += $output->writeString($this->dependency_path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labels !== null) {
      if (!is_array($this->labels)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('labels', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->labels));
        {
          foreach ($this->labels as $kiter31 => $viter32)
          {
            $xfer += $output->writeString($kiter31);
            {
              $output->writeListBegin(TType::STRUCT, count($viter32));
              {
                foreach ($viter32 as $iter33)
                {
                  $xfer += $iter33->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Sentence {
  static $_TSPEC;

  public $tokens = array(
  );
  public $labels = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tokens',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Token',
            ),
          ),
        2 => array(
          'var' => 'labels',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Label',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tokens'])) {
        $this->tokens = $vals['tokens'];
      }
      if (isset($vals['labels'])) {
        $this->labels = $vals['labels'];
      }
    }
  }

  public function getName() {
    return 'Sentence';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->tokens = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \Token();
              $xfer += $elem39->read($input);
              $this->tokens []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->labels = array();
            $_size40 = 0;
            $_ktype41 = 0;
            $_vtype42 = 0;
            $xfer += $input->readMapBegin($_ktype41, $_vtype42, $_size40);
            for ($_i44 = 0; $_i44 < $_size40; ++$_i44)
            {
              $key45 = '';
              $val46 = array();
              $xfer += $input->readString($key45);
              $val46 = array();
              $_size47 = 0;
              $_etype50 = 0;
              $xfer += $input->readListBegin($_etype50, $_size47);
              for ($_i51 = 0; $_i51 < $_size47; ++$_i51)
              {
                $elem52 = null;
                $elem52 = new \Label();
                $xfer += $elem52->read($input);
                $val46 []= $elem52;
              }
              $xfer += $input->readListEnd();
              $this->labels[$key45] = $val46;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Sentence');
    if ($this->tokens !== null) {
      if (!is_array($this->tokens)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tokens', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tokens));
        {
          foreach ($this->tokens as $iter53)
          {
            $xfer += $iter53->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labels !== null) {
      if (!is_array($this->labels)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('labels', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->labels));
        {
          foreach ($this->labels as $kiter54 => $viter55)
          {
            $xfer += $output->writeString($kiter54);
            {
              $output->writeListBegin(TType::STRUCT, count($viter55));
              {
                foreach ($viter55 as $iter56)
                {
                  $xfer += $iter56->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tagging {
  static $_TSPEC;

  public $tagger_id = null;
  public $raw_tagging = null;
  public $tagger_config = null;
  public $tagger_version = null;
  public $generation_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tagger_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'raw_tagging',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tagger_config',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tagger_version',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'generation_time',
          'type' => TType::STRUCT,
          'class' => '\StreamTime',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tagger_id'])) {
        $this->tagger_id = $vals['tagger_id'];
      }
      if (isset($vals['raw_tagging'])) {
        $this->raw_tagging = $vals['raw_tagging'];
      }
      if (isset($vals['tagger_config'])) {
        $this->tagger_config = $vals['tagger_config'];
      }
      if (isset($vals['tagger_version'])) {
        $this->tagger_version = $vals['tagger_version'];
      }
      if (isset($vals['generation_time'])) {
        $this->generation_time = $vals['generation_time'];
      }
    }
  }

  public function getName() {
    return 'Tagging';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagger_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->raw_tagging);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagger_config);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagger_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->generation_time = new \StreamTime();
            $xfer += $this->generation_time->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tagging');
    if ($this->tagger_id !== null) {
      $xfer += $output->writeFieldBegin('tagger_id', TType::STRING, 1);
      $xfer += $output->writeString($this->tagger_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->raw_tagging !== null) {
      $xfer += $output->writeFieldBegin('raw_tagging', TType::STRING, 2);
      $xfer += $output->writeString($this->raw_tagging);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagger_config !== null) {
      $xfer += $output->writeFieldBegin('tagger_config', TType::STRING, 3);
      $xfer += $output->writeString($this->tagger_config);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagger_version !== null) {
      $xfer += $output->writeFieldBegin('tagger_version', TType::STRING, 4);
      $xfer += $output->writeString($this->tagger_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generation_time !== null) {
      if (!is_object($this->generation_time)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('generation_time', TType::STRUCT, 5);
      $xfer += $this->generation_time->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Language {
  static $_TSPEC;

  public $code = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'Language';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Language');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 1);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContentItem {
  static $_TSPEC;

  public $raw = null;
  public $encoding = null;
  public $media_type = null;
  public $clean_html = null;
  public $clean_visible = null;
  public $logs = array(
  );
  public $taggings = array(
  );
  public $labels = array(
  );
  public $sentences = array(
  );
  public $sentence_blobs = array(
  );
  public $language = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'raw',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'encoding',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'media_type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clean_html',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clean_visible',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'logs',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'taggings',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Tagging',
            ),
          ),
        8 => array(
          'var' => 'labels',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Label',
              ),
            ),
          ),
        9 => array(
          'var' => 'sentences',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Sentence',
              ),
            ),
          ),
        10 => array(
          'var' => 'sentence_blobs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'language',
          'type' => TType::STRUCT,
          'class' => '\Language',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['raw'])) {
        $this->raw = $vals['raw'];
      }
      if (isset($vals['encoding'])) {
        $this->encoding = $vals['encoding'];
      }
      if (isset($vals['media_type'])) {
        $this->media_type = $vals['media_type'];
      }
      if (isset($vals['clean_html'])) {
        $this->clean_html = $vals['clean_html'];
      }
      if (isset($vals['clean_visible'])) {
        $this->clean_visible = $vals['clean_visible'];
      }
      if (isset($vals['logs'])) {
        $this->logs = $vals['logs'];
      }
      if (isset($vals['taggings'])) {
        $this->taggings = $vals['taggings'];
      }
      if (isset($vals['labels'])) {
        $this->labels = $vals['labels'];
      }
      if (isset($vals['sentences'])) {
        $this->sentences = $vals['sentences'];
      }
      if (isset($vals['sentence_blobs'])) {
        $this->sentence_blobs = $vals['sentence_blobs'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
    }
  }

  public function getName() {
    return 'ContentItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->raw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encoding);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clean_html);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clean_visible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->logs = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $xfer += $input->readString($elem62);
              $this->logs []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->taggings = array();
            $_size63 = 0;
            $_ktype64 = 0;
            $_vtype65 = 0;
            $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $key68 = '';
              $val69 = new \Tagging();
              $xfer += $input->readString($key68);
              $val69 = new \Tagging();
              $xfer += $val69->read($input);
              $this->taggings[$key68] = $val69;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->labels = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = '';
              $val76 = array();
              $xfer += $input->readString($key75);
              $val76 = array();
              $_size77 = 0;
              $_etype80 = 0;
              $xfer += $input->readListBegin($_etype80, $_size77);
              for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
              {
                $elem82 = null;
                $elem82 = new \Label();
                $xfer += $elem82->read($input);
                $val76 []= $elem82;
              }
              $xfer += $input->readListEnd();
              $this->labels[$key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->sentences = array();
            $_size83 = 0;
            $_ktype84 = 0;
            $_vtype85 = 0;
            $xfer += $input->readMapBegin($_ktype84, $_vtype85, $_size83);
            for ($_i87 = 0; $_i87 < $_size83; ++$_i87)
            {
              $key88 = '';
              $val89 = array();
              $xfer += $input->readString($key88);
              $val89 = array();
              $_size90 = 0;
              $_etype93 = 0;
              $xfer += $input->readListBegin($_etype93, $_size90);
              for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
              {
                $elem95 = null;
                $elem95 = new \Sentence();
                $xfer += $elem95->read($input);
                $val89 []= $elem95;
              }
              $xfer += $input->readListEnd();
              $this->sentences[$key88] = $val89;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->sentence_blobs = array();
            $_size96 = 0;
            $_ktype97 = 0;
            $_vtype98 = 0;
            $xfer += $input->readMapBegin($_ktype97, $_vtype98, $_size96);
            for ($_i100 = 0; $_i100 < $_size96; ++$_i100)
            {
              $key101 = '';
              $val102 = '';
              $xfer += $input->readString($key101);
              $xfer += $input->readString($val102);
              $this->sentence_blobs[$key101] = $val102;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->language = new \Language();
            $xfer += $this->language->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentItem');
    if ($this->raw !== null) {
      $xfer += $output->writeFieldBegin('raw', TType::STRING, 1);
      $xfer += $output->writeString($this->raw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->encoding !== null) {
      $xfer += $output->writeFieldBegin('encoding', TType::STRING, 2);
      $xfer += $output->writeString($this->encoding);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_type !== null) {
      $xfer += $output->writeFieldBegin('media_type', TType::STRING, 3);
      $xfer += $output->writeString($this->media_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clean_html !== null) {
      $xfer += $output->writeFieldBegin('clean_html', TType::STRING, 4);
      $xfer += $output->writeString($this->clean_html);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clean_visible !== null) {
      $xfer += $output->writeFieldBegin('clean_visible', TType::STRING, 5);
      $xfer += $output->writeString($this->clean_visible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logs !== null) {
      if (!is_array($this->logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logs', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->logs));
        {
          foreach ($this->logs as $iter103)
          {
            $xfer += $output->writeString($iter103);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taggings !== null) {
      if (!is_array($this->taggings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('taggings', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->taggings));
        {
          foreach ($this->taggings as $kiter104 => $viter105)
          {
            $xfer += $output->writeString($kiter104);
            $xfer += $viter105->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labels !== null) {
      if (!is_array($this->labels)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('labels', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->labels));
        {
          foreach ($this->labels as $kiter106 => $viter107)
          {
            $xfer += $output->writeString($kiter106);
            {
              $output->writeListBegin(TType::STRUCT, count($viter107));
              {
                foreach ($viter107 as $iter108)
                {
                  $xfer += $iter108->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sentences !== null) {
      if (!is_array($this->sentences)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sentences', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->sentences));
        {
          foreach ($this->sentences as $kiter109 => $viter110)
          {
            $xfer += $output->writeString($kiter109);
            {
              $output->writeListBegin(TType::STRUCT, count($viter110));
              {
                foreach ($viter110 as $iter111)
                {
                  $xfer += $iter111->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sentence_blobs !== null) {
      if (!is_array($this->sentence_blobs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sentence_blobs', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->sentence_blobs));
        {
          foreach ($this->sentence_blobs as $kiter112 => $viter113)
          {
            $xfer += $output->writeString($kiter112);
            $xfer += $output->writeString($viter113);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      if (!is_object($this->language)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('language', TType::STRUCT, 11);
      $xfer += $this->language->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Rating {
  static $_TSPEC;

  public $annotator = null;
  public $target = null;
  public $relevance = null;
  public $contains_mention = null;
  public $comments = null;
  public $mentions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'annotator',
          'type' => TType::STRUCT,
          'class' => '\Annotator',
          ),
        2 => array(
          'var' => 'target',
          'type' => TType::STRUCT,
          'class' => '\Target',
          ),
        3 => array(
          'var' => 'relevance',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'contains_mention',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'comments',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'mentions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['annotator'])) {
        $this->annotator = $vals['annotator'];
      }
      if (isset($vals['target'])) {
        $this->target = $vals['target'];
      }
      if (isset($vals['relevance'])) {
        $this->relevance = $vals['relevance'];
      }
      if (isset($vals['contains_mention'])) {
        $this->contains_mention = $vals['contains_mention'];
      }
      if (isset($vals['comments'])) {
        $this->comments = $vals['comments'];
      }
      if (isset($vals['mentions'])) {
        $this->mentions = $vals['mentions'];
      }
    }
  }

  public function getName() {
    return 'Rating';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->annotator = new \Annotator();
            $xfer += $this->annotator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->target = new \Target();
            $xfer += $this->target->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->relevance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->contains_mention);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->mentions = array();
            $_size114 = 0;
            $_etype117 = 0;
            $xfer += $input->readListBegin($_etype117, $_size114);
            for ($_i118 = 0; $_i118 < $_size114; ++$_i118)
            {
              $elem119 = null;
              $xfer += $input->readString($elem119);
              $this->mentions []= $elem119;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Rating');
    if ($this->annotator !== null) {
      if (!is_object($this->annotator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('annotator', TType::STRUCT, 1);
      $xfer += $this->annotator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target !== null) {
      if (!is_object($this->target)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('target', TType::STRUCT, 2);
      $xfer += $this->target->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relevance !== null) {
      $xfer += $output->writeFieldBegin('relevance', TType::I16, 3);
      $xfer += $output->writeI16($this->relevance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contains_mention !== null) {
      $xfer += $output->writeFieldBegin('contains_mention', TType::BOOL, 4);
      $xfer += $output->writeBool($this->contains_mention);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comments !== null) {
      $xfer += $output->writeFieldBegin('comments', TType::STRING, 5);
      $xfer += $output->writeString($this->comments);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mentions !== null) {
      if (!is_array($this->mentions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mentions', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->mentions));
        {
          foreach ($this->mentions as $iter120)
          {
            $xfer += $output->writeString($iter120);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StreamItem {
  static $_TSPEC;

  public $version = null;
  public $doc_id = null;
  public $abs_url = null;
  public $schost = null;
  public $original_url = null;
  public $source = null;
  public $body = null;
  public $source_metadata = array(
  );
  public $stream_id = null;
  public $stream_time = null;
  public $other_content = array(
  );
  public $ratings = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'doc_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'abs_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'schost',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'original_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'body',
          'type' => TType::STRUCT,
          'class' => '\ContentItem',
          ),
        8 => array(
          'var' => 'source_metadata',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'stream_id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'stream_time',
          'type' => TType::STRUCT,
          'class' => '\StreamTime',
          ),
        11 => array(
          'var' => 'other_content',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\ContentItem',
            ),
          ),
        12 => array(
          'var' => 'ratings',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Rating',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['doc_id'])) {
        $this->doc_id = $vals['doc_id'];
      }
      if (isset($vals['abs_url'])) {
        $this->abs_url = $vals['abs_url'];
      }
      if (isset($vals['schost'])) {
        $this->schost = $vals['schost'];
      }
      if (isset($vals['original_url'])) {
        $this->original_url = $vals['original_url'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['source_metadata'])) {
        $this->source_metadata = $vals['source_metadata'];
      }
      if (isset($vals['stream_id'])) {
        $this->stream_id = $vals['stream_id'];
      }
      if (isset($vals['stream_time'])) {
        $this->stream_time = $vals['stream_time'];
      }
      if (isset($vals['other_content'])) {
        $this->other_content = $vals['other_content'];
      }
      if (isset($vals['ratings'])) {
        $this->ratings = $vals['ratings'];
      }
    }
  }

  public function getName() {
    return 'StreamItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->doc_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->abs_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->schost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->original_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->body = new \ContentItem();
            $xfer += $this->body->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->source_metadata = array();
            $_size121 = 0;
            $_ktype122 = 0;
            $_vtype123 = 0;
            $xfer += $input->readMapBegin($_ktype122, $_vtype123, $_size121);
            for ($_i125 = 0; $_i125 < $_size121; ++$_i125)
            {
              $key126 = '';
              $val127 = '';
              $xfer += $input->readString($key126);
              $xfer += $input->readString($val127);
              $this->source_metadata[$key126] = $val127;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stream_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->stream_time = new \StreamTime();
            $xfer += $this->stream_time->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->other_content = array();
            $_size128 = 0;
            $_ktype129 = 0;
            $_vtype130 = 0;
            $xfer += $input->readMapBegin($_ktype129, $_vtype130, $_size128);
            for ($_i132 = 0; $_i132 < $_size128; ++$_i132)
            {
              $key133 = '';
              $val134 = new \ContentItem();
              $xfer += $input->readString($key133);
              $val134 = new \ContentItem();
              $xfer += $val134->read($input);
              $this->other_content[$key133] = $val134;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::MAP) {
            $this->ratings = array();
            $_size135 = 0;
            $_ktype136 = 0;
            $_vtype137 = 0;
            $xfer += $input->readMapBegin($_ktype136, $_vtype137, $_size135);
            for ($_i139 = 0; $_i139 < $_size135; ++$_i139)
            {
              $key140 = '';
              $val141 = array();
              $xfer += $input->readString($key140);
              $val141 = array();
              $_size142 = 0;
              $_etype145 = 0;
              $xfer += $input->readListBegin($_etype145, $_size142);
              for ($_i146 = 0; $_i146 < $_size142; ++$_i146)
              {
                $elem147 = null;
                $elem147 = new \Rating();
                $xfer += $elem147->read($input);
                $val141 []= $elem147;
              }
              $xfer += $input->readListEnd();
              $this->ratings[$key140] = $val141;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StreamItem');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doc_id !== null) {
      $xfer += $output->writeFieldBegin('doc_id', TType::STRING, 2);
      $xfer += $output->writeString($this->doc_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->abs_url !== null) {
      $xfer += $output->writeFieldBegin('abs_url', TType::STRING, 3);
      $xfer += $output->writeString($this->abs_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schost !== null) {
      $xfer += $output->writeFieldBegin('schost', TType::STRING, 4);
      $xfer += $output->writeString($this->schost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_url !== null) {
      $xfer += $output->writeFieldBegin('original_url', TType::STRING, 5);
      $xfer += $output->writeString($this->original_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 6);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      if (!is_object($this->body)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('body', TType::STRUCT, 7);
      $xfer += $this->body->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_metadata !== null) {
      if (!is_array($this->source_metadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source_metadata', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->source_metadata));
        {
          foreach ($this->source_metadata as $kiter148 => $viter149)
          {
            $xfer += $output->writeString($kiter148);
            $xfer += $output->writeString($viter149);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stream_id !== null) {
      $xfer += $output->writeFieldBegin('stream_id', TType::STRING, 9);
      $xfer += $output->writeString($this->stream_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stream_time !== null) {
      if (!is_object($this->stream_time)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stream_time', TType::STRUCT, 10);
      $xfer += $this->stream_time->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->other_content !== null) {
      if (!is_array($this->other_content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('other_content', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->other_content));
        {
          foreach ($this->other_content as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            $xfer += $viter151->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratings !== null) {
      if (!is_array($this->ratings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ratings', TType::MAP, 12);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->ratings));
        {
          foreach ($this->ratings as $kiter152 => $viter153)
          {
            $xfer += $output->writeString($kiter152);
            {
              $output->writeListBegin(TType::STRUCT, count($viter153));
              {
                foreach ($viter153 as $iter154)
                {
                  $xfer += $iter154->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


